// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output 		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

clock #(32'd5000000) clock(MAX10_CLK1_50, clk); //1 second clock

IRSensor ir_ctrl_inst (
    .clk(MAX10_CLK1_50), 
    .enable(ARDUINO_IO[8]),
    .led0(LEDR[9]),  
	 .hex0( HEX0[7:0]), 
	 .hex1( HEX1[7:0]),
	 .displayState(state)
);

MotionController led_ctrl_inst (
    .clk(clk), 
    .motion(ARDUINO_IO[0]),
	 .enable(ARDUINO_IO[8]),
	 .systemOn(state), 
    .buzzer(ARDUINO_IO[1]),
	 .tamper_counter(tamper_counter), 
    .led0(LEDR[0])    
);




assign ARDUINO_IO[7] = state;
assign ARDUINO_IO[6] = ~ARDUINO_IO[0]; 


wire[15:0] accel_x, accel_y;

accelerometer gsensor (
  .MAX10_CLK1_50(MAX10_CLK1_50),
  .GSENSOR_CS_N(GSENSOR_CS_N),
  .GSENSOR_INT(GSENSOR_INT),
  .GSENSOR_SCLK(GSENSOR_SCLK),
  .GSENSOR_SDI(GSENSOR_SDI),
  .GSENSOR_SDO(GSENSOR_SDO),
  .data_x(accel_x),
  .data_y(accel_y)
);

SEG7 X_1 (
    .iDIG(accel_x[11:8]),
    .oSEG(HEX5)
);

SEG7 X_2 (
    .iDIG(accel_x[7:4]),
    .oSEG(HEX4)
);

SEG7 Y_1 (
    .iDIG(accel_y[11:8]),
    .oSEG(HEX3)
);

SEG7 Y_2 (
    .iDIG(accel_y[7:4]),
    .oSEG(HEX2)
);

reg x, y, x_direction, y_direction;
assign ARDUINO_IO[15] = x;
assign ARDUINO_IO[14] = x_direction;
assign ARDUINO_IO[10] = y;
assign ARDUINO_IO[9] = y_direction;

reg [3:0] tamper_counter;

always @(posedge MAX10_CLK1_50, negedge KEY[0]) begin

	if(!KEY[0])begin
		tamper_counter <= 4'b0;
	end
	else begin
		
		if(accel_x[11:8] == 4'b1111 && accel_x[7:4] <= 4'b1110)begin //right
		x <= 1;
		x_direction <= 1;
		tamper_counter <= tamper_counter + 1;
		end
		else if(accel_x[11:8] == 4'b0000 && accel_x[7:4] >= 4'b0001) begin //left
			x <= 1;
			x_direction <= 0;
			tamper_counter <= tamper_counter + 1;
		end
		else begin //middle
			x <= 0;
			tamper_counter <= tamper_counter;
		end
		
		if(accel_y[11:8] == 4'b1111 && accel_y[7:4] <= 4'b1100)begin //down
			y <= 1;
			y_direction <= 1;
			tamper_counter <= tamper_counter + 1;
		end
		else if(accel_y[11:8] == 4'b0000 && accel_y[7:4] >= 4'b0001) begin //up
			y <= 1;
			y_direction <= 0;
			tamper_counter <= tamper_counter + 1;
		end
		else begin //flat
			y <= 0;
			tamper_counter <= tamper_counter;
		end
		
	end
end

// Instantiate modules
top_module camera_inst(
    .clk(MAX10_CLK1_50),
    .rst_n(SW[0] || (ARDUINO_IO[1])),
    .cmos_pclk(GPIO[21]),
    .cmos_href(GPIO[22]),
    .cmos_vsync(GPIO[23]),
    .cmos_db(GPIO[19:12]),
    .cmos_sda(GPIO[24]),
    .cmos_scl(GPIO[25]),
    .cmos_rst_n(GPIO[11]),
    .cmos_pwdn(GPIO[10]),
    .cmos_xclk(GPIO[20]),
	 //Debugging
	 .key(SW[9:6]),
    .led(),
	 .sdram_clk(DRAM_CLK),
    .sdram_cke(DRAM_CKE),
    .sdram_cs_n(DRAM_CS_N),
    .sdram_ras_n(DRAM_RAS_N),
    .sdram_cas_n(DRAM_CAS_N),
    .sdram_we_n(DRAM_WE_N),
    .sdram_addr(DRAM_ADDR),
    .sdram_ba(DRAM_BA),
    .sdram_dqm({DRAM_UDQM, DRAM_LDQM}),
    .sdram_dq(DRAM_DQ),
	 .vga_out_r(VGA_R),
    .vga_out_g(VGA_G),
    .vga_out_b(VGA_B),
    .vga_out_vs(VGA_VS),
    .vga_out_hs(VGA_HS)
);


endmodule
